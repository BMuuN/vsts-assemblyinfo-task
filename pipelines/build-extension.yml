trigger:
  branches:
    include:
    - master
    - 3.0.x
  batch: True

name: $(Build.DefinitionName)_$(date:yyyy).$(date:MM).$(date:dd)$(rev:.r)

pool:
  name: Azure Pipelines
  demands: npm

resources:
  repositories:
  - repository: self
    type: git
    ref: master

variables:
  buildConfiguration: 'release'
  buildPlatform: 'any cpu'
  extensionVersion: '3.1.1'

jobs:
- job: Job_1
  displayName: 'Run Tests'
  cancelTimeoutInMinutes: 1
  pool:
    vmImage: ubuntu-20.04
  steps:
  - checkout: self
  - task: Npm@1
    displayName: 'Build Development'
    inputs:
      command: custom
      verbose: false
      customCommand: run build:dev:clean
  - task: Npm@1
    displayName: 'Run Tests'
    enabled: False
    inputs:
      command: custom
      verbose: false
      customCommand: run test:run
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testRunTitle: Assembly Info Test Results
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/coverage/cobertura-coverage.xml
  - task: ArchiveFiles@2
    displayName: 'Archive Source'
    condition: succeededOrFailed()
    inputs:
      rootFolderOrFile: $(Build.SourcesDirectory)
      includeRootFolder: false
      sevenZipCompression: 5
      archiveFile: $(Build.ArtifactStagingDirectory)/AssemblyInfo - Source.zip
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Source'
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/AssemblyInfo - Source.zip
  - task: ArchiveFiles@2
    displayName: 'Archive Build Directory'
    inputs:
      rootFolderOrFile: '$(Agent.BuildDirectory)'
      includeRootFolder: false
      archiveFile: '$(Build.ArtifactStagingDirectory)/AssemblyInfo - Build Directory.zip'
    condition: succeededOrFailed()
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Build Directory'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/AssemblyInfo - Build Directory.zip'
  - task: ArchiveFiles@2
    displayName: 'Archive Build Directory'
    condition: succeededOrFailed()
    inputs:
      rootFolderOrFile: $(Agent.BuildDirectory)
      includeRootFolder: false
      sevenZipCompression: 5
      archiveFile: $(Build.ArtifactStagingDirectory)/AssemblyInfo - Build Directory.zip
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Build Directory'
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/AssemblyInfo - Build Directory.zip

- job: Job_2
  displayName: 'Build Extension'
  cancelTimeoutInMinutes: 1
  dependsOn: Job_1
  pool:
    vmImage: ubuntu-20.04
  steps:
  - checkout: self
  - task: Npm@1
    displayName: 'Install Node Application Packages'
    enabled: False
    inputs:
      verbose: false
  - task: Npm@1
    displayName: 'Build Production'
    inputs:
      command: custom
      verbose: false
      customCommand: run build:prod:clean
  - task: ArchiveFiles@2
    displayName: 'Archive Extension'
    inputs:
      rootFolderOrFile: $(Build.SourcesDirectory)/src
      includeRootFolder: false
      sevenZipCompression: 5
      archiveFile: $(Build.ArtifactStagingDirectory)/AssemblyInfo - Extension.zip
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Extension'
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/AssemblyInfo - Extension.zip

- job: Job_3
  displayName: Publish
  cancelTimeoutInMinutes: 1
  dependsOn:
  - Job_1
  - Job_2
  condition: succeededOrFailed()
  pool:
    vmImage: ubuntu-20.04
  steps:
  - checkout: self
  - task: Assembly-Info-NetCore-Test@3
    displayName: Set Assembly Manifest Data
    condition: always()
    inputs:
      UpdateBuildNumber: $(Build.DefinitionName)_v$(ExtensionVersion)
      AddBuildTag: v$(ExtensionVersion)