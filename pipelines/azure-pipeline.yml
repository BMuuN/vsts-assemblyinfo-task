trigger:
  branches:
    include:
    - refs/heads/master
  batch: True

name: 'AssemblyInfo-Extension_$(date:yyyy).$(date:MM).$(date:dd)$(rev:.r)'

pool:
  name: Azure Pipelines
  demands: npm

resources:
  repositories:
  - repository: self
    type: git
    ref: master

variables:
  buildConfiguration: 'release'
  buildPlatform: 'any cpu'
  ExtensionVersion: '3.2.0'
  PublisherId: 'bleddynrichards'

jobs:
- job: Job_1
  displayName: 'Run Tests'
  cancelTimeoutInMinutes: 1
  pool:
    vmImage: ubuntu-20.04
  steps:
  - checkout: self
  - task: Npm@1
    displayName: 'Build Development'
    inputs:
      command: custom
      verbose: false
      customCommand: run build:dev:clean
  - task: Npm@1
    displayName: 'Run Tests'
    enabled: False
    inputs:
      command: custom
      verbose: false
      customCommand: run test
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testRunTitle: Assembly Info Test Results
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(Build.SourcesDirectory)/coverage/cobertura-coverage.xml
  - task: ArchiveFiles@2
    displayName: 'Archive Source'
    condition: succeededOrFailed()
    inputs:
      rootFolderOrFile: $(Build.SourcesDirectory)
      includeRootFolder: false
      sevenZipCompression: 5
      archiveFile: $(Build.ArtifactStagingDirectory)/AssemblyInfo - Source.zip
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Source'
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/AssemblyInfo - Source.zip
  - task: ArchiveFiles@2
    displayName: 'Archive Build Directory'
    condition: succeededOrFailed()
    inputs:
      rootFolderOrFile: '$(Agent.BuildDirectory)'
      includeRootFolder: false
      archiveFile: '$(Build.ArtifactStagingDirectory)/AssemblyInfo - Build Directory.zip'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Build Directory'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/AssemblyInfo - Build Directory.zip'

- job: Job_2
  displayName: 'Package Extension - Production'
  cancelTimeoutInMinutes: 1
  dependsOn: Job_1
  pool:
    vmImage: ubuntu-20.04
  steps:
  - checkout: self
  - task: Npm@1
    displayName: Build Production
    inputs:
      command: custom
      verbose: false
      customCommand: run build:prod:clean
  - task: DeleteFiles@1
    displayName: Delete Development Files
    inputs:
      SourceFolder: $(Build.SourcesDirectory)/src
      Contents: >-
        netcore/tests
        netcore/package.json
        netcore/package-lock.json
        netcore/tsconfig.json
        netframework/tests
        netframework/package.json
        netframework/package-lock.json
        netframework/tsconfig.json
  - task: replacetokens@4
    displayName: 'Replace Tokens for Production'
    inputs:
      rootDirectory: $(Build.SourcesDirectory)/src
      targetFiles: >-
        **/vss-extension.json
        **/netcore/task.json
        **/netcore/index.js
        **/netcore/services/telemetry.service.js
        **/netframework/task.json
        **/netframework/index.js
        **/netframework/services/telemetry.service.js
      variableFiles: $(Build.SourcesDirectory)/pipelines/production-vars.json
  - task: TfxInstaller@3
    displayName: 'Use Node CLI for Azure DevOps (tfx-cli): v0.6.x'
    inputs:
      version: v0.6.x
  - task: PackageAzureDevOpsExtension@3
    displayName: 'Package Extension'
    inputs:
      rootFolder: '$(Build.SourcesDirectory)/src'
      patternManifest: '**/vss-extension.json'
      outputPath: '$(Build.ArtifactStagingDirectory)/packages/Assembly-Info-$(ExtensionVersion).vsix'
      outputVariable: Extension.OutputPathProduction
      publisherId: '$(PublisherId)'
      extensionId: 'Assembly-Info-Task'
      extensionName: 'Assembly Info'
      extensionVersion: '$(ExtensionVersion)'
      updateTasksVersion: true
      extensionVisibility: public
      extensionPricing: free  
  - task: ArchiveFiles@2
    displayName: 'Archive Extension'
    inputs:
      rootFolderOrFile: $(Build.SourcesDirectory)/src
      includeRootFolder: false
      archiveFile: $(Build.ArtifactStagingDirectory)/AssemblyInfo - Extension Build - Production.zip
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Extension Build'
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/AssemblyInfo - Extension Build - Production.zip
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Extension'
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/packages/Assembly-Info-$(ExtensionVersion).vsix

- job: Job_3
  displayName: 'Package Extension - Test'
  cancelTimeoutInMinutes: 1
  dependsOn: Job_2
  pool:
    vmImage: ubuntu-20.04
  steps:
  - checkout: self
  - task: Npm@1
    displayName: Build Production
    inputs:
      command: custom
      verbose: false
      customCommand: run build:prod:clean
  - task: DeleteFiles@1
    displayName: Delete Development Files
    inputs:
      SourceFolder: $(Build.SourcesDirectory)/src
      Contents: >-
        netcore/tests
        netcore/package.json
        netcore/package-lock.json
        netcore/tsconfig.json
        netframework/tests
        netframework/package.json
        netframework/package-lock.json
        netframework/tsconfig.json
  - task: replacetokens@4
    displayName: 'Replace Tokens for Test'
    inputs:
      rootDirectory: $(Build.SourcesDirectory)/src
      targetFiles: >-
        **/vss-extension.json
        **/netcore/task.json
        **/netcore/index.js
        **/netcore/services/telemetry.service.js
        **/netframework/task.json
        **/netframework/index.js
        **/netframework/services/telemetry.service.js
      variableFiles: $(Build.SourcesDirectory)/pipelines/test-vars.json
  - task: TfxInstaller@3
    displayName: 'Use Node CLI for Azure DevOps (tfx-cli): v0.6.x'
    inputs:
      version: v0.6.x
  - task: PackageAzureDevOpsExtension@3
    displayName: 'Package Extension'
    inputs:
      rootFolder: '$(Build.SourcesDirectory)/src'
      patternManifest: '**/vss-extension.json'
      outputPath: '$(Build.ArtifactStagingDirectory)/packages/Assembly-Info-$(ExtensionVersion)-private.vsix'
      outputVariable: Extension.OutputPathTest
      publisherId: '$(PublisherId)'
      extensionId: 'Assembly-Info-Task-Test'
      extensionName: 'Assembly Info (Test)'
      extensionVersion: '$(ExtensionVersion)'
      updateTasksVersion: true
      extensionVisibility: private
      extensionPricing: free  
  - task: ArchiveFiles@2
    displayName: 'Archive Extension'
    inputs:
      rootFolderOrFile: $(Build.SourcesDirectory)/src
      includeRootFolder: false
      archiveFile: $(Build.ArtifactStagingDirectory)/AssemblyInfo - Extension Build - Test.zip
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Extension Build'
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/AssemblyInfo - Extension Build - Test.zip
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Extension'
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/packages/Assembly-Info-$(ExtensionVersion)-private.vsix

- job: Job_4
  displayName: Pipeline Tagging
  cancelTimeoutInMinutes: 1
  dependsOn:
  - Job_2
  - Job_3
  pool:
    vmImage: ubuntu-20.04
  steps:
  - checkout: self
  - task: Assembly-Info-NetCore@3
    displayName: Set Assembly Manifest Data
    inputs:
      UpdateBuildNumber: $(Build.DefinitionName)_v$(ExtensionVersion)
      AddBuildTag: v$(ExtensionVersion)